// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CreateDeviceOperation.cs" company="Microsoft"> 
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
//   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
//   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
//   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
//   OTHER DEALINGS IN THE SOFTWARE. 
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Microsoft.Azure.Devices.Common;
using Samples.IoTHub.Core.Interfaces;

namespace Samples.IoTHub.Core.Operations.Device
{
    public class CreateDeviceOperation : IOperation
    {
        public CreateDeviceOperation(IoTHubContext context)
        {
            this.IoTHubContext = context;
        }

        public IoTHubContext IoTHubContext { get; set; }

        public async Task ExecuteAsync(OperationParameters parameters)
        {
            try
            {
                var deviceId = parameters.Arguments["deviceid"].ToString();
                if (string.IsNullOrWhiteSpace(deviceId))
                {
                    throw new ArgumentNullException("deviceid");
                }

                var autoGenerateDevicekey = Convert.ToBoolean(parameters.Arguments["auto"]);

                if (autoGenerateDevicekey)
                {
                    var device = new Microsoft.Azure.Devices.Device(deviceId);
                    device.Authentication = new Microsoft.Azure.Devices.AuthenticationMechanism();
                    device.Authentication.SymmetricKey.PrimaryKey = CryptoKeyGenerator.GenerateKey(32);
                    device.Authentication.SymmetricKey.SecondaryKey = CryptoKeyGenerator.GenerateKey(32);
                    var devices = await this.IoTHubContext.RegistryManager.AddDeviceAsync(device);
                }
                else
                {
                    var deviceKey = parameters.Arguments["deviceKey"].ToString();

                    if (string.IsNullOrWhiteSpace(deviceKey))
                    {
                        throw new ArgumentNullException("devicekey");
                    }

                    var device = new Microsoft.Azure.Devices.Device(deviceId);
                    device.Authentication = new Microsoft.Azure.Devices.AuthenticationMechanism();
                    device.Authentication.SymmetricKey.PrimaryKey = deviceKey;
                    device.Authentication.SymmetricKey.SecondaryKey = deviceKey;
                    var devices = await this.IoTHubContext.RegistryManager.AddDeviceAsync(device);
                }
            }
            catch (Exception exception)
            {
                // return Task.FromResult(true);
            }
        }
    }
}